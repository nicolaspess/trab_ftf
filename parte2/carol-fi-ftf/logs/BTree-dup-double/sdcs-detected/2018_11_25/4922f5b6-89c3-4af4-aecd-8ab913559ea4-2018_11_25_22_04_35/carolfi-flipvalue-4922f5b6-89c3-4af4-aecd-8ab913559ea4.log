[INFO -- 2018-11-25 22:04:32]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-25 22:04:32]
Initialization strings:
[INFO -- 2018-11-25 22:04:32]
(1) file /tmp/BTree-dup/main
[INFO -- 2018-11-25 22:04:32]
(2)  set args /tmp/BTree-dup/input_100000 /tmp/BTree-dup/output_100000 /tmp/BTree-dup-detection.log /tmp/BTree-dup/output2_100000
[INFO -- 2018-11-25 22:04:32]
initSignal:0
[INFO -- 2018-11-25 22:04:32]
endSignal:2
[INFO -- 2018-11-25 22:04:32]
faultModel:1
[INFO -- 2018-11-25 22:04:33]
Backtrace BEGIN:
#0  0x0000555555556581 in BTreeNode::insertNonFull (this=0x555555c30ba0, k=4237208) at BTree_dup.cpp:520
#1  0x0000555555556639 in BTreeNode::insertNonFull (this=0x555555d8d170, k=4237208) at BTree_dup.cpp:535
#2  0x0000555555556639 in BTreeNode::insertNonFull (this=0x555555ef6eb0, k=4237208) at BTree_dup.cpp:535
#3  0x0000555555556639 in BTreeNode::insertNonFull (this=0x555555ef6e20, k=4237208) at BTree_dup.cpp:535
#4  0x0000555555556478 in BTree::insert (this=0x7fffffffda50, k=4237208) at BTree_dup.cpp:489
#5  0x0000555555556c25 in runner (input=0x7fffffffe22a "/tmp/BTree-dup/input_100000") at BTree_dup.cpp:664
#6  0x0000555555556f7a in main (argc=5, argv=0x7fffffffde68) at BTree_dup.cpp:712

515			n = n+1;
516		}
517		else // If this node is not leaf
518		{
519			// Find the child which is going to have the new key
520			while (i >= 0 && keys[i] > k)
521				i--;
522	
523			// See if the found child is full
524			if (C[i+1]->n == 2*t-1)

Backtrace END
Memory content before bitflip:0x980xa70x400x00
Fault Model: Double bit-flip
base address to flip value: 0x7fffffffd934
address max offset: 4
Memory content after  bitflip:0x1a0xa70x400x00
frame name: BTreeNode::insertNonFull
symbol name: k
symbol filename: BTree_dup.cpp
symbol line: 496
value: 4237082
value address: 0x7fffffffd934
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-11-25 22:04:33]
Fault Injection Successful after 1.385866641998291s
[INFO -- 2018-11-25 22:04:34]
event type: exit
[INFO -- 2018-11-25 22:04:34]
exit code: 0
